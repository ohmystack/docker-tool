#!/bin/bash
set -o errexit

# default ENVs
DOCKER_SOCK='unix:///var/run/docker.sock'

DOCKER="docker -H $DOCKER_SOCK"

# -----------------
# Help
# -----------------

print_usage() {
	# NOTE: After modification, remember to run `:Align -` in vim to align the help info with '-' seperator
	cat <<-EOF
	
	Usage:
	sudo ./docker-tool <action> <name>

	Actions:
		pid         - Get the pid of container
		net         - Show network info (mode, veth pair, ...) of container
		img, images - Grep image by given <name>

	EOF
}

# -----------------
# Utils
# -----------------

# echo with 256 color
# Usage: echo_color <color_id> <text>
echo_color() {
	dye=$(echo -e "\e[38;5;${1}m")
	stop_dye=$(echo -e "\e[0m")
	echo "$dye$2$stop_dye"
}

echo_err() {
	echo_color 202 "$1" 1>&2
}

command_exists() {
	which $1 > /dev/nul 2>&1
}

# Ensure there are <count> args
# Usage: ensure_count_args 1 "$@"
ensure_count_args() {
	local require=$1
	shift
	if [ "$#" -lt $require ]; then
		echo_err "Error: need $require args at least, but $# given"
		exit 1
	fi
}

ensure_command_exists() {
	if ! command_exists $1 ; then
		echo_err "Error: cannot find '$1' program"
		exit 1
	fi
}

# -----------------
# Actions
# -----------------

action_pid() {
	ensure_count_args 1 "$@"
	$DOCKER inspect -f {{.State.Pid}} $1
}

action_net() {
	ensure_count_args 1 "$@"
	ensure_command_exists nsenter
	ensure_command_exists ethtool

	local pid=$(action_pid $1)

	local network_mode=$($DOCKER inspect -f {{.HostConfig.NetworkMode}} $1)
	echo_color 135 "NetworkMode: $network_mode"
	case $network_mode in
		'default')
			local in_veth_statistcs=$(nsenter -t $pid -n -F -- ethtool --statistics eth0 | tail -1)
			local out_veth_id=${in_veth_statistcs##*:}  # Get the value after ":"
			local out_veth_dev=$(ip link | grep $out_veth_id | tr -d ' ' | cut -d ':' -f 2)

			echo_color 222 "(Outside)"
			ip addr show $out_veth_dev

			echo_color 39 "(Inside container)"
			nsenter -t $pid -n -F -- ip addr show eth0
			;;
		'host')
			nsenter -t $pid -n -F -- ip addr show eth0
			;;
		'container:'*)
			local cid=${network_mode##*:}  # Get the value after ":"
			echo_color 135 "(In container:$cid)"
			action_net $cid
			;;
	esac
}

action_images() {
	ensure_count_args 1 "$@"
	$DOCKER images | grep --color=auto $1
}

# -----------------
# Main
# -----------------

if [ -n $1 ]; then
	case $1 in
		'help'|'-h'|'--help')
			print_usage
			;;
		'pid')
			shift
			action_pid "$@"
			;;
		'net')
			shift
			action_net "$@"
			;;
		'img'|'images')
			shift
			action_images "$@"
			;;
		*)
			echo_err "Error: unknown action '$1'"
			exit 1
			;;
	esac
else
	print_usage
fi
